Notes:-
1. Command structure: <command -option(s) argument(s)[order of the args matter]>
2. Space is the command term separator
3. Options are used to modify the default behavior of the command, its often starts with hyphen '-'
4. Some commands supports the long form of the options, they start with '--'. Ex: date -u == date --universal
5. We can compress the options in a single hyphen but not for long form
6. Some option require the parameters, it is also compressible. Ex: ncal -A 1
7. When we combine option with its params, other options should be given separately
8. Navigation in man pages, space or f to next page, b to next page, /pattern for search in page
9. Content inside [] in synopsis of command means its optional
10. []... means can accept multiple option/args
11. / is the top level or root directory in the linux
12. /home is the directory where the directories of all the user contains. '~' as shortcut for home dir i.e., /home/username
13. '.' reference for current dir
14. '..' reference for parent dir
15. Relative path: Path relative to the current working dir. Ex- cd Desktop given the current dir contains Desktop dir
16. Absolute path: Starts with '/'. Ex- cd /home/user/Desktop
17. /bin: It is the binary dir which contains the execs files
18. /etc: It contains the configuration files and initialization scripts
19. /media: Accessing the contents of removable media such as sd card, cd rom, usb
20. /root: all contents for the super user called root
21. '\char': char will have no meaning when put after \, also known as escape character
22. 'nano' shortcuts: ctrl+s to save, ctrl+o to save in file prompt, ctrl+x to exit nano, meta+$ to soft warpping for long lines, ctrl+w for searching
23. ctrl+r to add content of another file, ctrl+t and ctrl+s to spell check, ctrl+\ for replace, ctrl+/ to go to line
23. Meta/M key is 'alt' here, we can see relevant options at the bottom while performing certain operation so keep looking there
24. git config --list for listing configuration
25. commands killed is stored in the kill ring
26. previous commands are stored in ~/.bash_history
27. $HISTFILESIZE, $HISTSIZE:- HISTSIZE is the number of lines or commands that are stored in memory in a history list while your bash session is ongoing. 
28. HISTFILESIZE is the number of lines or commands that (a) are allowed in the history file at startup time of a session, and (b) are stored in the history file at the end of your bash session for use in future sessions. Notice the distinction between file: on disk - and list: in memory
29. man command use less cmd, so all shortcuts work as mentioned in point 8
30. Standard input/output/error are the communication channel between computer and its environment
31. We can combine <, >, >> in a single command
32. All streams has numeric file descriptors, ip=0, op=1, err=2, hence we can use 1>, 0< etc
33. Orders matter while combining std op and err the op comes before err
34. If we want to redr. the std output and error stream in same file we use: ls -l > output.txt 2>&1 or ls -l &> output.txt, we can also use '&>>'
35. We use the pipe '|' character for pipelining the inputs/outputs of the command. The output of the first command will be send to the std ip of the second command
36. We should note that when we are redirecting we are redi to file and when we are piping we are connecting the commands. We can combine piping and redirecting
37. Wildcard characters(aka globbing patterns) is used to build patterns to match multiple files, if no match comes then they are considered simple character
	* -> matches anything, i.e., range is 0-many characters
	? -> matches exactly 1 character
	[] -> matches specified range of character. Ex- [123], [0-9], [A-Z]
	[^] -> excludes specified range
	~ -> /home/<user>
38. {} -> generate arbitrary string. It will generate multiple string based on the pattern. Ex- touch app{1,2,3,4,5}.css -> make 3 files app1.css to app5.css. Multiple {} outputs the 	cartesian product, touch j{1..365} will generate j1 to j365 files, syntax-> {start..end..skip}, we can nest {}
39. Arithmetic operation: $((expression)). Ex- $((2+2)) will be 4, $ in shell is prefix for variables
40. Double Quotes: It will consider as specified string as given except --> $, \, ` <--
41. Single Quotes: Double Quotes but no exception
42. Command subs: $(command) or `command`. Ex- echo $(whoami) will op as ankit
43. Timestamps: mtime(modification time when last content was changed), ctime(change time while file was moved, renamed, edit permission), atime(access time when file read by another 	applicatiuon or command)
44. exec will run everytime for each output pattern

Linux Commands:-
1. date
2. cal, ncal, ncal 2023, ncal april 1999, ncal -3 -h -j == ncal -3hj
3. clear
4. echo: echoes back to the terminal
5. sort <file>: sorts the content of the file
6. rm <file>: removes the file
7. man <command> : documentations
8. man -k [section] <command search>: for going into manual for the given command
9. type <command>: for checking type of command (binary execs, shell builtin, shell function, alias)
10. which <comamnd>: path of the command, where it is located
11. help <command>: docs for shell builtin commands as man do not contain all shell builtin
12. xdg-open <path>: to open the path in files gui
13. pwd: print working dir
14. ls: list the contents of the dir.
	-l for long listing (mtime view), 
	-a for hidden files, 
	-R for recursive view
	-lc for change time view
	-lc for access time view
15. cd <path>: change directory
16. touch <path/filename>: create file(s)
	touch file -d "date as string": make file with provided time as mtime
17. file <filename>: file type by some type of test not by extention
18. mkdir <dirname/path>: create directory
19. nano <filename(optional)>: Interactive cmd line file editor with user friendly functionality, creates file if doesn't exist
20. rm <filename>: delete file/dirs permanently, -d option to delete empty dir, -r remove dirs recursively empty or not, -i to prompt for each removal
21. rmdir <filename>: remove empty dir
22. mv <src file/dir>(s) <dstn>: move file/dirs to destination path
23. mv <curr> <new name>: rename file/dir
24. cp <src file/dir>(s) <dstn>: copy file/dirs to destination path, -r for copy dirs recursively
25. !<number> to run command from command history log
26. ctrl+r to enter command search mode from history log
27. cat <file>: concatenates or print the contemts of a file
28. less <file>: displays the content of a file in interactive mode via per page
29. tac <file>: cat but in reverse order w.r.t. line, vertical reverse
30. rev <file>: cat but horizontal reverse
31. head <file>: displays the content of first specified n(def=10) line, from start
	head/tail -n 3 file: first/last 3 lines
	head/tail -6 file: first/last 6 lines
	-c <bytes>: for the content size
32. tail <file>: displays the content of last specified n(def=10) line, from end
	-f: monitor the new updates in a file
33. wc <file>: prints the count of words, lines and bytes followed by file name
	-l, -w, -c: lines, words, bytes 
34. sort <file>: outputs the sorted(def=alphabetically line wise, lower case comes first, number is lexicographic) contents of a file
	-r: reverse order
	-n: numeric sort
	-u: ignore duplicates
	-k[value]: sort particular column
35. '>': for redirecting output. Ex- date > today means redirect the output stream from 'date' command to file named 'today' (overwrite)
36. '>>': > but append
37. echo [...] >/>> <file>: to create a file with content
38. '<': for redirecting input. Ex- cat < today means redirect the content from file named 'today' as input stream to the 'cat' command
39. '2>'/'2>>': for redirecting std error
40. ls /usr/bin -1 | wc -l: counting the line we got from ls -1(put all contents line wise) for path
41. tr [set1] [set2]: translates, squueze or delete the character from std ip and provide std op. Ex- cat message | tr s S: change s with S on the message file's content
42. tr -d [:alpha:]: delete any alphabets
43. du <path>: ops the size of the content of the path
44. 'tee' command is used for piplining the output and also redirect the op in file. Ex- cat f1 f2 | tee f1f2 | wc: concatenate the f1 f2 files in op and pipline the op to wc command
45. locate <query>: search for pathname coress. to query and return any matching substring, creates and make use of its database
	-l<n>: limit to n results
	-e: if exist at the time locate is run
	-i: ignore case
46. updatedb: update database plocate database
47. find <query>: finds path(files/dirs) on the spot slow but powerful, do not make use of database
	-type f/d: for file and dirs
	-name "pattern": search pattern
	-not or !: all except given pattern
	-and: must match all pattern (implied or default)
	-or: any one pattern match
	-iname: ignore case 
	-size size: filter via size, +size for >size and -size for <size (no sign so exact match). Ex: find path -size +5G, find path -size -50M
	-empty: find empty
	-mmin/-cmin/-amin: m,c,a time in minutes
	-mtime/-ctime/-atime: m,c,a time in 24 hr period. or days
	-exec command '{}' ';': for mapping each result of find to be executed by the given command where {} is replaced by the result of find. We have to give quotes its conventional
	-ok command....: asks for all result to execute given command or not
	-user user: finds for that given user
	-newer reference: finds with the mtime wrt to the mtime of reference file
	Ex: find -name "*.txt" -exec ls '{}' ';' is equal to find -name "*.txt" | xargs ls
48. xargs: builds and executes command lines from standard inputs can be used instead of exec, it is usually piplined

Shortcuts:-
1. ctrl+l to clear terminal
2. ctrl+a and ctrl+e to navigate cursor to begining and end of the line
3. ctrl+f and ctrl+b to move cursor forward and backward over character
4. alt+f and alt+b to move cursor forward and backward over word
5. ctrl+t to swap character with its previous
6. alt+t to swap word with its previous
7. ctrl+k to kill the line to the end of the cursor
8. ctrl+u to kill the line to the start of the cursor
9. alt+d to kill the word to the end of the cursor on that word
10. ctrl+w to kill the word to the end of the cursor on that word
11. ctrl+y to retrieve the command from kill ring 
























